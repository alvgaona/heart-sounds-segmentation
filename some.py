import torch


# AUROC per class
auroc_class0 = torch.tensor(
    [
        0.9907969832420349,  # pass 1
        0.9931915998458862,  # pass 2
        0.9882465600967407,  # pass 3
        0.9899256825447083,  # pass 4
        0.9918924570083618,  # pass 5
        0.9915763735771179,  # pass 6
        0.9874613285064697,  # pass 7
        0.9917188286781311,  # pass 8
        0.9924848675727844,  # pass 9
    ]
)

auroc_class1 = torch.tensor(
    [
        0.9939025640487671,  # pass 1
        0.9957478642463684,  # pass 2
        0.9905580878257751,  # pass 3
        0.9932919740676880,  # pass 4
        0.9945434331893921,  # pass 5
        0.9946971535682678,  # pass 6
        0.9900848865509033,  # pass 7
        0.9949067234992981,  # pass 8
        0.9951317310333252,  # pass 9
    ]
)

auroc_class2 = torch.tensor(
    [
        0.9936526417732239,  # pass 1
        0.9949149489402771,  # pass 2
        0.9910314679145813,  # pass 3
        0.9931728243827820,  # pass 4
        0.9939899444580078,  # pass 5
        0.9942626953125000,  # pass 6
        0.9902989268302917,  # pass 7
        0.9945412874221802,  # pass 8
        0.9948345422744751,  # pass 9
    ]
)

auroc_class3 = torch.tensor(
    [
        0.9940147399902344,  # pass 1
        0.9957454204559326,  # pass 2
        0.9909160137176514,  # pass 3
        0.9935144782066345,  # pass 4
        0.9945499300956726,  # pass 5
        0.9946648478507996,  # pass 6
        0.9909445047378540,  # pass 7
        0.9948959946632385,  # pass 8
        0.9955241084098816,  # pass 9
    ]
)

# F1 Score per class
f1_class0 = torch.tensor(
    [
        0.8894222378730774,  # pass 1
        0.9046898484230042,  # pass 2
        0.8741304874420166,  # pass 3
        0.8828545808792114,  # pass 4
        0.8956258893013000,  # pass 5
        0.8920127153396606,  # pass 6
        0.8678235411643982,  # pass 7
        0.8946887850761414,  # pass 8
        0.8969079852104187,  # pass 9
    ]
)

f1_class1 = torch.tensor(
    [
        0.9264476299285889,  # pass 1
        0.9359132051467896,  # pass 2
        0.9118286371231079,  # pass 3
        0.9191445112228394,  # pass 4
        0.9289477467536926,  # pass 5
        0.9269103407859802,  # pass 6
        0.9037379026412964,  # pass 7
        0.9298058748245239,  # pass 8
        0.9315829277038574,  # pass 9
    ]
)

f1_class2 = torch.tensor(
    [
        0.8916308879852295,  # pass 1
        0.9028764367103577,  # pass 2
        0.8738191127777100,  # pass 3
        0.8858888745307922,  # pass 4
        0.8970504999160767,  # pass 5
        0.8969514369964600,  # pass 6
        0.8691721558570862,  # pass 7
        0.8978946208953857,  # pass 8
        0.8993356227874756,  # pass 9
    ]
)

f1_class3 = torch.tensor(
    [
        0.9610984325408936,  # pass 1
        0.9668595790863037,  # pass 2
        0.9518515467643738,  # pass 3
        0.9579061269760132,  # pass 4
        0.9630433320999146,  # pass 5
        0.9627740979194641,  # pass 6
        0.9514763951301575,  # pass 7
        0.9631503820419312,  # pass 8
        0.9650068283081055,  # pass 9
    ]
)

# Precision per class
precision_class0 = torch.tensor(
    [
        0.8896680474281311,  # pass 1
        0.8931667804718018,  # pass 2
        0.8822160363197327,  # pass 3
        0.8797667026519775,  # pass 4
        0.8864467740058899,  # pass 5
        0.8761582970619202,  # pass 6
        0.8394998311996460,  # pass 7
        0.8858336210250854,  # pass 8
        0.8984826207160950,  # pass 9
    ]
)

precision_class1 = torch.tensor(
    [
        0.9244996905326843,  # pass 1
        0.9384032487869263,  # pass 2
        0.9079996943473816,  # pass 3
        0.9138047695159912,  # pass 4
        0.9304754734039307,  # pass 5
        0.9321531057357788,  # pass 6
        0.9039893746376038,  # pass 7
        0.9413935542106628,  # pass 8
        0.9343432784080505,  # pass 9
    ]
)

precision_class2 = torch.tensor(
    [
        0.8882626891136169,  # pass 1
        0.9004065394401550,  # pass 2
        0.8803028464317322,  # pass 3
        0.8947458863258362,  # pass 4
        0.8982056379318237,  # pass 5
        0.8982893824577332,  # pass 6
        0.8696327209472656,  # pass 7
        0.9013408422470093,  # pass 8
        0.8972408175468445,  # pass 9
    ]
)

precision_class3 = torch.tensor(
    [
        0.9628685712814331,  # pass 1
        0.9706641435623169,  # pass 2
        0.9492303729057312,  # pass 3
        0.9594044685363770,  # pass 4
        0.9654521346092224,  # pass 5
        0.9660251140594482,  # pass 6
        0.9627739191055298,  # pass 7
        0.9603133797645569,  # pass 8
        0.9636993408203125,  # pass 9
    ]
)

# Recall per class
recall_class0 = torch.tensor(
    [
        0.8893015384674072,  # pass 1
        0.9165955781936646,  # pass 2
        0.8662791848182678,  # pass 3
        0.8860329389572144,  # pass 4
        0.9050386548042297,  # pass 5
        0.9085154533386230,  # pass 6
        0.8983558416366577,  # pass 7
        0.9038206934928894,  # pass 8
        0.8953888416290283,  # pass 9
    ]
)

recall_class1 = torch.tensor(
    [
        0.9285349845886230,  # pass 1
        0.9335314631462097,  # pass 2
        0.9158722758293152,  # pass 3
        0.9246997237205505,  # pass 4
        0.9275242090225220,  # pass 5
        0.9218668937683105,  # pass 6
        0.9037585258483887,  # pass 7
        0.9185846447944641,  # pass 8
        0.9289249181747437,  # pass 9
    ]
)

recall_class2 = torch.tensor(
    [
        0.8951318264007568,  # pass 1
        0.9054406285285950,  # pass 2
        0.8675559759140015,  # pass 3
        0.8772954940795898,  # pass 4
        0.8959618210792542,  # pass 5
        0.8957530260086060,  # pass 6
        0.8688709735870361,  # pass 7
        0.8945465087890625,  # pass 8
        0.9015241265296936,  # pass 9
    ]
)

recall_class3 = torch.tensor(
    [
        0.9593899250030518,  # pass 1
        0.9631269574165344,  # pass 2
        0.9545473456382751,  # pass 3
        0.9564629197120667,  # pass 4
        0.9606826305389404,  # pass 5
        0.9595909118652344,  # pass 6
        0.9405143260955810,  # pass 7
        0.9660396575927734,  # pass 8
        0.9663433432579040,  # pass 9
    ]
)

accuracy_class0 = torch.tensor(
    [
        0.8893015384674072,  # pass 1
        0.9165955781936646,  # pass 2
        0.8662791848182678,  # pass 3
        0.8860329389572144,  # pass 4
        0.9050386548042297,  # pass 5
        0.9085154533386230,  # pass 6
        0.8983558416366577,  # pass 7
        0.9038206934928894,  # pass 8
        0.8953888416290283,  # pass 9
    ]
)

accuracy_class1 = torch.tensor(
    [
        0.9285349845886230,  # pass 1
        0.9335314631462097,  # pass 2
        0.9158722758293152,  # pass 3
        0.9246997237205505,  # pass 4
        0.9275242090225220,  # pass 5
        0.9218668937683105,  # pass 6
        0.9037585258483887,  # pass 7
        0.9185846447944641,  # pass 8
        0.9289249181747437,  # pass 9
    ]
)

accuracy_class2 = torch.tensor(
    [
        0.8951318264007568,  # pass 1
        0.9054406285285950,  # pass 2
        0.8675559759140015,  # pass 3
        0.8772954940795898,  # pass 4
        0.8959618210792542,  # pass 5
        0.8957530260086060,  # pass 6
        0.8688709735870361,  # pass 7
        0.8945465087890625,  # pass 8
        0.9015241265296936,  # pass 9
    ]
)

accuracy_class3 = torch.tensor(
    [
        0.9593899250030518,  # pass 1
        0.9631269574165344,  # pass 2
        0.9545473456382751,  # pass 3
        0.9564629197120667,  # pass 4
        0.9606826305389404,  # pass 5
        0.9595909118652344,  # pass 6
        0.9405143260955810,  # pass 7
        0.9660396575927734,  # pass 8
        0.9663433432579040,  # pass 9
    ]
)

# Calculate means and standard deviations for all metrics
metrics = {
    "Accuracy": [accuracy_class0, accuracy_class1, accuracy_class2, accuracy_class3],
    "AUROC": [auroc_class0, auroc_class1, auroc_class2, auroc_class3],
    "F1": [f1_class0, f1_class1, f1_class2, f1_class3],
    "Precision": [precision_class0, precision_class1, precision_class2, precision_class3],
    "Recall": [recall_class0, recall_class1, recall_class2, recall_class3],
}

for metric_name, class_tensors in metrics.items():
    print(f"\n{metric_name} Statistics:")
    for i, tensor in enumerate(class_tensors):
        mean = tensor.mean()
        std = tensor.std()
        print(f"Class {i}: Mean = {mean:.4f}, Std = {std:.4f}")
